libname cr " /home/dhnsingh0/cms_provider/data" access=readonly;


***********************;
* 	Quiz 1.03		   ;
***********************;

proc contents data=cr._all_ nods;
run;

***********************;
* 	Quiz 1.04		   ;
***********************;

options validvarname=v7;

proc import datafile = '\\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94\data\payroll.csv'
	dbms =csv
	out = payroll
	replace;
	getnames = yes;
	guessingrows = 425;
run;

proc contents data = payroll;
run;
	

***********************;
* 	Quiz 1.05		   ;
***********************;

libname cert xlsx '\\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94\data\employee.xlsx';

data work.adds;
	set cert.addresses;
run;

data work.phones;
	set cert.phones;
run;

proc contents data = adds;
run;


*******************************;
* 	  Practice Quiz 1.07	   ;
*******************************;

libname cr '\\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94\data';

proc sort data = cr.employee_raw out = emp_clean
		dupout = emp_check
		nodupkey;		
	by empid;
run;	

*where country in ('US', 'AU');
proc freq data = emp_clean;
	tables country department;
run;

proc print data = cr.employee_raw;
	where termdate > hiredate and termdate ne .;
run;

/*printing violation to aforementioned rule*/
proc print data = cr.employee_raw;
	where termdate > hiredate and termdate ne .;
run;


*******************************;
* 	  Practice Quiz 1.08	   ;
*******************************;

libname cr '\\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94\data';

proc sort data = cr.employee_raw out = emp_sort
		dupout = emp_check
		nodupkey;		
	by empid;
run;	

proc print data = emp_sort;
	where jobtitle contains 'Logistics';
	format hiredate date9.;
run;

proc means data = emp_sort;
	where hiredate > '01JAN2010'd and termdate eq .;
	format hiredate date9.;
run;
	
proc sort data = emp_sort out = sal_sort;
	by descending salary;
run;


*******************************;
* 	  Practice Quiz 2.01	   ;
*******************************;

libname cr '\\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94\data';

proc contents data = sashelp.holiday;
run;

data holiday2019;
	set sashelp.holiday;
	where end=. and rule=0;
	CountryCode=substr(Category,4,2);
	Date=mdy(month, day, 2019);
	keep Desc CountryCode Date;
run;


*******************************;
* 	  Practice Quiz 2.02	   ;
*******************************;

data sales; 
	set cr.employee;
	where department = "Sales" and termdate = .;
	length SalesLevel $6;
	if findw(jobtitle, "I")>0 then SalesLevel = "Entry";
	else if findw(jobtitle, "II")>0 or findw(jobtitle, "III")>0 then SalesLevel = "Middle";
	else if findw(jobtitle, "IV")>0 then SalesLevel = "Senior";
run;

proc sort data = sales out = sales_sort;
	by saleslevel;
run;

proc means data = sales_sort;
	by saleslevel;
run;


*******************************;
* 	  Practice Quiz 2.03	   ;
*******************************;

data bonus; 
	set cr.employee;
	where termdate = .;
	YearsEmp = YrDif(HireDate, '01JAN2019'd);
	if YearsEmp >= 10 then do;
		Bonus = 0.03*salary;
		Vacation = 20;
	end;
	else if YearsEmp = 10 then do;
		Bonus = 0.02*salary;
		Vacation = 15;
	end;
run;

proc sort data = bonus out = bonus_sort;
	by descending YearsEmp;
run;

proc means data = bonus_sort;
	by descending vacation;
run;


*******************************;
* 	  Practice Quiz 2.04	   ;
*******************************;

libname cr '\\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94\data';

* sorting by team;
proc sort data = sashelp.baseball out = baseball;
	by Team;
run;

* checking for labels;
proc contents data = baseball;
run;

* diagnosing code errors;
* adding labels to report;
title "Baseball Team Statistics";
proc print data=baseball lable;
	by Team;
	var Name Position YrMajor nAtBat nHits nHome;
	sum nAtBat nHits nHome;
	id Name; /*replacing obs column with name */
run;

*******************************;
* 	  Practice Quiz 2.05	   ;
*******************************;

* sorting data by relevant variables;
proc sort data = cr.employee out = employee;
	by city department jobtitle;
run;

* finding highest emp count by city;
proc means data = employee sum;
	class city;
run;

* creating report for percentage of total: sales;
proc freq data = employee;
	tables department;
run;

* checking for unique jobtitle values;
proc freq data = employee nlevels;
	tables jobtitle;
run;


*******************************;
* 	  Practice Quiz 2.06	   ;
*******************************;

data profit;
	set cr.profit;
run;

* creating twoway freq table;
proc freq data = profit;
	format order_date monname.; /* monname format to display only one row for each month of order date*/
	tables order_date*order_source/ norow nocol;
run;


*******************************;
* 	  Practice Quiz 2.07	   ;
*******************************;
title;
data employee;
	set cr.employee;
run;

* creating report of salaries by jobtitle;
proc means data = employee sum mean min max maxdec=0;
	where department = "Sales";
	var salary;
	*class jobtitle;
run;


*******************************;
* 	  Practice Quiz 2.08	   ;
*******************************;

data employee;
	set cr.employee;
run;

* creating report of salaries by jobtitle;
proc means noprint data = employee;
	var salary;
	output out = salary_summary mean = AvgSalary; 
	class department city; 
	*TotalSalary = sum(Salary, AvgSalary);
	ways 2;
run;

/*proc means data=cr.employee noprint;*/
/*    var Salary;*/
/*    class Department City;*/
/*    output out=salary_summary mean=AvgSalary sum=TotalSalary;*/
/*    ways 2;*/
/*run;*/
/**/


*******************************;
* 	  Practice Quiz 2.09	   ;
*******************************;

* debugging errors ;
ods graphics on;
ods noproctitle; /* no space in no proctitle option */

* ods excel is the correct syntax; * ods xlsx is not valid ;
ods excel file="\\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94\output\heart.xlsx"; /* local directory */
title "Distribution of Patient Status";
proc freq data=sashelp.heart order=freq;
	tables DeathCause Chol_Status BP_Status / nocum plots=freqplot;
run;

title "Summary of Measures for Patients";
proc means data=sashelp.heart mean;
	var AgeAtDeath Cholesterol Weight Smoking;
	class Sex;
run;
ods excel close; /* ods _ close instead of end */


*******************************;
* 	  Practice Quiz 2.10	   ;
*******************************;

* modifying to generate pdf;
ods noproctitle;
ods pdf file = "\\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94\output\truck.pdf" 
		style = journal startpage = no;

title "Truck Summary";
title2 "SASHELP.CARS Table";

proc freq data=sashelp.cars;
	where Type="Truck";
	tables Make / nocum;
run;

proc print data=sashelp.cars;
	where Type="Truck";
	id Make;
	var Model MSRP MPG_City MPG_Highway;
run;

ods pdf close;


*******************************;
* 	  Practice Quiz 2.11	   ;
*******************************;

%let path = \\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94;
libname cr "&path/data";

proc export data = cr.employee_current outfile = "&path/output/employees_current.csv" dbms = csv replace;
run;

%let path = \\toaster\homes\d\h\dhnsingh\nt\ecrb94_ue\ecrb94_ue\ECRB94;

options validvarname=v7;
libname tsa "&path\programs\wk3_tsa_claims_project";

/* reading in csv values */
proc import datafile = "&path\data\TSAClaims2002_2017.csv" 
		out = tsa.claims_raw
		dbms = csv 
		replace;
		getnames = no;
		guessingrows=max;
run;

/* removing header row */
data claims_vars;
	set tsa.claims_raw;
	if VAR6 = "Claim_Type" then delete;
run;

/* renaming variables after unclean read from csv */
data claims_vars;
	set claims_vars (rename = (VAR1=Claim_Number VAR2=Date_Received VAR3=Incident_Date VAR4=Airport_Code VAR5=Airport_Name
									   VAR6=Claim_Type   VAR7=Claim_Site    VAR8=Item_Category VAR9=Close_Amount VAR10=Disposition
									   VAR11=StateName VAR12=State VAR13=County VAR14=City));

run;

/* removing duplicate records */
proc sort data = claims_vars out = claims_nodup
		dupout = claims_duprecs
		nodupkey;
	by claim_number;
run;
	
/* missing values */
data claims_complete;
	set claims_nodup;
	if Claim_Type = "-" or Claim_Type = "" then Claim_Type = "Unknown";
	if Claim_Site = "-" or Claim_Site = "" then Claim_Site = "Unknown";
	if Disposition = "-" or Disposition = "" then Disposition = "Unknown";
run;

/* unique values for claim_type,  claim_site, disposition*/
proc sql;
	select distinct(claim_type) as uClaim_Type from claims_complete; 
	select distinct(claim_site) as uClaim_Site from claims_complete; 
	select distinct(disposition) as uDisposition from claims_complete;
run;

/* splitting claim type column by slash, replacing spaces and truncations to standardize */
data claims_unique;
	set claims_complete;
	claim_type = scan(claim_type, 1, '/');
	disposition = tranwrd(disposition, "losed: Contractor ", "Closed:Contractor ");
	disposition = tranwrd(disposition, ": ", ":");
run;

proc sql;
	select distinct(claim_type) as uClaim_Type from claims_unique; 
	select distinct(claim_site) as uClaim_Site from claims_unique; 
	select distinct(disposition) as uDisposition from claims_unique;
run;


%let path = C:/Users/dhnsingh/Documents/ecrb94_ue/ECRB94;

libname tsa "&path/programs/wk3_tsa_claims_project";
options validvarname=v7;

/* reading in csv values */
proc import datafile = "&path/data/TSAClaims2002_2017.csv" 
		dbms = csv
		out = claims_raw		 
		replace;
	guessingrows=max;
run;

/* exploratory */
proc print data = claims_raw (obs= 20);
run;

proc contents data = claims_raw varnum;
run;

proc freq data = claims_raw;
	tables claim_site
			disposition
			claim_type
			date_received
			incident_date / nocum nopercent;
	format incident_date date_received year4.; /* key hack to grouping date by year */
run;

proc print data = claims_raw;
	where date_received < incident_date;
	format date_received incident_date date9.;
run;


/* removing duplicate records */
proc sort data = claims_raw 
		out = claims_nodup noduprecs;
	by _all_; /* sorting by all sorts on all columns, so dups are adjacent */
run;
	
proc sort data = claims_nodup;
	by incident_date;
run;

/* missing values */
data tsa.claims_cleaned;
	set claims_nodup;
/* claim_site column */
	if Claim_Site in ("-", "") then Claim_Site = "Unknown";
/* disposition column */
	if disposition in ("-", "") then disposition = "Unknown";
	else if disposition = "losed: Contractor Claim" then disposition = "Closed:Contractor Claim";
	else if disposition = "Closed: Canceled" then disposition = "Closed:Canceled";
/* claim_type column */
	if claim_type in ("-", "") then claim_type = "Unknown";
	else if claim_type = "Passenger Property Loss/Personal Injur" then claim_type = "Passenger Property Loss";
	else if claim_type = "Passenger Property Loss/Personal Injury" then claim_type = "Passenger Property Loss";
	else if claim_type = "Property Damage/Personal Injury" then claim_type = "Property Damage";
/* case change */
	State = upcase(State);
	Statename = propcase(Statename);
/* date issues */
	if (Incident_date > Date_received or
		date_received = . or
		incident_date = . or 
		year(incident_date) < 2002 or
		year(incident_date) > 2017 or
		year(date_received) < 2002 or
		year(date_received) > 2017) then Date_Issues = "Needs Review";
/* labels and formats */
	format incident_date date_received date9. close_amount dollar20.2;
	label Airport_Code = "Airport Code"
		Airport_Name = "Airport Name"
		Claim_Number = "Claim Number"
		Claim_Site = "Claim Site"
		Claim_Type = "Claim Type"
		Close_Amount = "Close Amount"
		Date_Issues = "Date Issues"
		Date_Received = "Date Received"
		Incident_Date = "Incident Date"
		Item_Category = "Item Category";
/* dropping vars */
		drop county city;
run;

/* checking final data set for consistencies */
proc freq data = tsa.claims_cleaned order = freq;
	tables claim_site
			disposition
			claim_type
			date_issues / nopercent nocum;
run;	

*******************************;
*          Report              ;
*******************************;
%let statename=Hawaii;
%let outpath=C:\Users\dhnsingh\Documents\ecrb94_ue\ECRB94\Reports;
ods pdf file =  "&outpath/ClaimsReport.pdf" style=meadow pdftoc = 1;
ods noproctitle;

/* number of date issues overall */
ods proclabel "Overall Date Issues";
title "Overall Date Issues in the Data";
proc freq data = tsa.claims_cleaned;
	table date_issues / missing nocum nopercent;
run;
title;

/* claims per year of incident date */
ods graphics on;
ods proclabel "Overall Claims By Year";
title "Overall Claims By Year";
proc freq data = tsa.claims_cleaned;
	table incident_date / nocum nopercent plots = freqplot;
	format incident_date year4.;
	where date_issues is null;
run;
title;

/* relevant statistics by region using macros */
title "&statename Claims Overview";
title "&statename Claim Types, Claim Sites, and Disposition";
proc freq data = TSA.claims_cleaned order = freq;
	table claim_type claim_site disposition / nocum nopercent;
	where statename = "&statename" and date_issues is null;
run;
title;

/* mean, min, max rounded for close amounts */
title "&statename Close Amount Statistics";
title "Close Amount Statistics for &statename";
proc means data = tsa.claims_cleaned mean min max sum maxdec=0;
	var close_amount;
	where statename= "&statename" and date_issues is null;
run;
title;

ods pdf close;

*******************************;
* 	  Practice Quiz 4.01	   ;
*******************************;

%let path = C:\Users\dhnsingh\Documents\ECRB94;
libname cr "&path\data";

proc contents data = cr.employee;
run;

* debugging ;

data emp_US emp_AU;
	set cr.employee(keep=EmpID Name Country JobTitle Salary Department TermDate);
	where TermDate = .;
	Country=upcase(country);
	if TermDate = . and Country="US" then output emp_US;
	else output emp_AU;
run;

*******************************;
* 	  Practice Quiz 4.02	   ;
*******************************;

* from scratch solution ;
data dead (drop = status) alive (drop = status DeathCause AgeAtDeath);
	set sashelp.heart;
	if Status = "Dead" then output dead;
	else if Status = "Alive" then output alive;
run;

*******************************;
* 	  Practice Quiz 4.03	   ;
*******************************;

proc sort data = cr.employee_current out = employee_current;
	by department;
run;

/* creating a summary table with cumulating salary column by department */
data salary;
	set employee_current;
	by department;
	if first.department = 1 then TotalSalary = 0;
	TotalSalary + Salary;
	if last.department = 1;
run;

/* salary forecast table */
data salaryforecast;
	set salary;
	format TotalSalary dollar12.;
	Year = 1;
	TotalSalary = TotalSalary*1.03;
	output;
	Year = 2;
	TotalSalary = TotalSalary*1.03;
	output;
	Year = 3;
	TotalSalary = TotalSalary*1.03;
	output;
run;

%let path = C:\Users\dhnsingh\Documents\ECRB94;
libname cr "&path\data";

*******************************;
* 	  Practice Quiz 4.04	   ;
*******************************;

/* original program from scratch */

proc freq data = sashelp.stocks;
	tables date;
	format date year4.;
run;

proc sort data = sashelp.stocks out=stocks;
	by Stock Date;
run;

data stocks_total;
	set stocks;
	where year(date) = 2005;
	by Stock; /* anytime you use by, there must be an accompanying sort statement */	
	if first.Stock = 1 then YTDVolume = 0;
	YtDVolume + Volume;
run;

*******************************;
* 	  Practice Quiz 4.05	   ;
*******************************;

proc sort data = sashelp.shoes out = shoes;
	by product sales;
run;

data highlow;
	set shoes;
	by product sales;
	if last.product = 1 then Highlow = "High";
	if first.product = 1 then HighLow = "Low";
	if first.product = 1 or last.product = 1;
run;


*******************************;
* 	  Practice Quiz 4.06	   ;
*******************************;

proc sort data=cr.employee_current out=emp_sort;
	by Department Salary;
run;

data dept_salary;
	set emp_sort;
	by Department Salary;
	if first.Department then do;
		TotalDeptSalary=0;
		LowSalaryJob=JobTitle;		
	end;
	TotalDeptSalary+Salary;
	if last.department then do;
		HighSalaryJob=JobTitle;
		output;
	end;
	keep Department TotalDeptSalary HighSalaryJob LowSalaryJob;
	format TotalDeptSalary dollar12.;
run;


%let path = C:\Users\dhnsingh\Documents\ECRB94;
libname cr "&path\data";

*******************************;
* 	  Practice Quiz 4.07	   ;
*******************************;

data fish;
	set sashelp.fish;
	Length = round(mean(of Length1--Length3),.01);
run;

proc means data = fish mean sum min max maxdec = 2;
	var Length;
	class Species;
run;

*******************************;
* 	  Practice Quiz 4.08	   ;
*******************************;

proc contents data = sashelp.baseball;
run;

data outfield;
	set sashelp.baseball;
	where substr(Position, 2, 1) = 'F';
	Player=catx(" ", scan(Name, 2, ','), scan(Name, 1, ','));
	BatAvg=round(nHits/nAtBat, 0.001);
run;

proc sort data = outfield;
	by descending BatAvg;
run;

*******************************;
* 	  Practice Quiz 4.09	   ;
*******************************;

proc contents data= emp_new;
run;

data emp_new;
	set cr.employee_new (rename = (HireDate = HireDateChar));
	EmpID=substr(EmpID, 4);
	HireDate=input(HireDateChar, anydtdte10.);
	Salary=input(AnnualSalary, dollar12.);
	drop HireDateChar;
	format HireDate date9. Salary dollar12.;
run;	
	

%let path = C:\Users\dhnsingh\Documents\ECRB94;
libname cr "&path\data";

*******************************;
* 	  Practice Quiz 4.10	   ;
*******************************;

proc format;
	value BMIRANGE
		low -< 18.5 = 'Underweight'
		18.5 - 24.9 = 'Normal'
		25 - 29.9 = 'Overweight'
		30 - high = 'Obese';
run;

proc freq data = sashelp.bmimen;
	where age >= 21;
	table BMI;
	format BMI BMIRANGE.;
run;

*******************************;
* 	  Practice Quiz 4.11	   ;
*******************************;

data continent_codes;
	set cr.continent_codes;
run;

proc format;
	value CONTFMT
		91 = 'North America'
		92 = 'South America'
		93 = 'Europe'
		94 = 'Africa'
		95 = 'Asia'
		96 = 'Oceania'
		97 = 'Antarctica';
run;

data demographics;
	set cr.demographics;
run;

proc contents data = demographics;
run;

proc means data = demographics min max mean sum;
	var pop;
	class cont;
	format cont CONTFMT.;
run;

*******************************;
* 	  Practice Quiz 4.12	   ;
*******************************;

* debugging exercise ;

proc format;
	value $statfmt 'S'="Single"
	              'M'="Married"
	              'O'="Other";
	value salrange low-<50000="Under $50K"
	               50000-100000="50K-100K"
	               100000<-high="Over 100K";
run;

proc freq data=cr.employee;
	tables Status;
	tables City*Salary / nopercent nocol;
	format Status $statfmt. Salary salrange.;
run;

%let path = C:\Users\dhnsingh\Documents\ECRB94;
libname cr "&path\data";

*******************************;
* 	  Practice Quiz 5.01	   ;
*******************************;

data q3_sales;
	set cr.m7_sales cr.m8_sales(rename = (Employee_ID=EmpID)) cr.m9_sales;
run;

proc freq data = q3_sales;
	table order_type;
run;

*******************************;
* 	  Practice Quiz 5.02	   ;
*******************************;

proc sort data = cr.employee out = employee;
	by empid;
run;

proc sort data = cr.employee_addresses out = employee_addresses;
	by employee_id;
run;

data emp_full;
	merge employee (in=emp rename=(EmpID=Employee_ID)) 
				employee_addresses (in=add);
	by Employee_ID;
	if emp=1;
run;

*******************************;
* 	  Practice Quiz 5.03	   ;
*******************************;

* debugging exercise ;

proc sort data=cr.employee(keep=EmpID Name Department) out=emp_sort;
	by EmpID;
run;

proc sort data=cr.employee_donations out=donate_sort;
	by EmpID;
run;

data donation nodonation;
	merge emp_sort(in=in_emp) donate_sort(in=in_don);
	by EmpID;
	if in_don=1 and in_emp=1 then do;
		TotalDonation=sum(of Qtr1-Qtr4);
		output donation;
	end;
	if in_don= 0 and in_emp=1 then output nodonation;
run;


proc sort data = donation out = don_sort;
	by name;
run;
	

%let path = C:\Users\dhnsingh\Documents\ECRB94;
libname cr "&path\data";

*******************************;
* 	  Practice Quiz 5.04	   ;
*******************************;

data shoes_future;
	set cr.shoes_summary;
	drop totalstores totalprofit;
run;


data shoes_future;
	Year = 0;
	set cr.shoes_summary;
	do Year = 1 to 5;
		profitperstore + (profitperstore*0.03);
		output;
	end;
	drop totalstores totalprofit;
run;

*******************************;
* 	  Practice Quiz 5.05	   ;
*******************************;

data future_expenses;
   format Wages Retire Medical TotalCost comma15.;
   Wages=12874000;
   Retire=1765000;
   Medical=649000;
   Year=0;
   TotalCost = 0;
   do Year = 1 to 10;
   		Wages + (Wages*0.06);
	        Retire + (Retire*0.014);
   		Medical + (Medical*0.095);
		TotalCost = Wages + Retire + Medical;
		output;
   end;
run;


*******************************;
* 	  Practice Quiz 5.06	   ;
*******************************;

* code completion exercise;

data income_expenses;
	Wages=12874000;
	Retire=1765000;
	Medical=649000;
	Income=50000000;
	Year=0;
	do until (TotalCost > Income );
		Year + 1;
		Wages=Wages*1.06;
		Retire=Retire*1.014;
		Medical=Medical *1.095;
		Income=Income *1.01;
		TotalCost=sum(Wages, Retire, Medical);
		output;
	end;
	keep Year TotalCost;
	format TotalCost comma12.;
run;


%let path = C:\Users\dhnsingh\Documents\ECRB94;
libname cr "&path\data";

*******************************;
* 	  Practice Quiz 5.07	   ;
*******************************;

proc sort data=sashelp.shoes out=shoes_sort nodupkey;
	by Region Subsidiary Product;
run;

proc transpose data=shoes_sort out=shoes_sales (drop = _name_ _label_);
	var sales;
	by Region Subsidiary;
	id Product;
run;


*******************************;
* 	  Practice Quiz 5.08	   ;
*******************************;

data training_wide;
	set cr.employee_training;
run;

proc sort data = training_wide;
	by name;
run;

proc transpose data = training_wide out = training_narrow;
	by name;
	var Compliance_Training Corporate_Security On_the_Job_Safety;
run;

proc sort data = training_narrow;
	by col1;
run;

proc freq data = training_narrow;
	table col1;
	format col1 monname.;
run;


* q3;

data earnings;
    Amount=1000;
    Rate=.075/12;
    do Month=1 to 12;
        Earned+(amount+earned)*rate;
    end;
run;

* q4;
data earnings;
    Amount=1000;
    Rate=.075/12;
    do Month=1 to 12;
        Earned+(amount+earned)*rate;
    end;
run;

* q5;
data earnings;
    Amount=1000;
    Rate=.075/12;
    do Month=1 to 12;
        Earned+(amount+earned)*rate;
    end;
run;

* q6;
data work.invest;
    do year=1990 to 2004;
        Capital+5000;
        capital+(capital*.10);
        output;
    end;
run;

* q9;
data work.invest;
    capital=100000;
    do until(Capital gt 500000);
        Year+1;
        capital+(capital*.10);
    end;
run;

data work.invest;
    capital=100000;
    do while(Capital le 500000);
        Year+1;
        capital+(capital*.10);
    end;
run;


* q10;
data work.go250;
    set cert.cars;
    do gallons=1 to 10 ... ;
        Distance=gallons*mpg;
        output;
    end;
run;

%let path = C:\Users\dhnsingh\Documents\ECRB94;
libname cr "&path\data";

* reading in tourism data ;
data tourism;
	set cr.tourism;
run;

proc contents data = tourism;
run;

* creating cleaned columns: country, type, category;
data tourism;
	retain Country_name Tourism_type Category Series YR2014;
	length Tourism_type $20. Category $50.;
	set tourism;
/* creating empty columns */
	Tourism_type = "";
	Category = "";
/* populating columns conditionally */
	if A ne . then Country_Name = Country;
	if Country = "Inbound tourism" then Tourism_Type = "Inbound tourism";
	else if Country = "Outbound tourism" then Tourism_Type = "Outbound tourism";
/* modifying column values */
	if Country = "Arrivals - Thousands" then Category = "Arrivals";
	if Country = "Departures - Thousands" then Category = "Departures";
	if Country = "Passenger transport - US$ Mn" then Category = "Passenger transport - US$";
	if Country = "Tourism expenditure in other countries - US$ Mn" then Category = "Tourism expenditure in other countries - US$";
	if Country = "Tourism expenditure in the country - US$ Mn" then Category = "Tourism expenditure in the country - US$";
	if Country = "Travel - US$ Mn" then Category = "Travel - US$";
/* modifying series column */
	series = upcase(series);
	if series = ".." then series = "";
/* creating yr2014 column */
	YR2014 = 0;
	if findw(country,'Thousands')>0 then YR2014 = _2014*1000;
	if findw(country,'Mn')>0 then YR2014 = _2014*1000000;
	format YR2014 comma20.;
	keep Country_Name Tourism_Type Category Series YR2014;
run;

/* checking cleaned table */
proc contents data = tourism;
run;

* populating empty rows by filling down using retain ;
data cleaned_tourism (drop = filledType) ;
	set tourism;
	retain filledType ; /* keeps the last non-missing value in memory */
	if not missing(Tourism_type) then filledType = Tourism_type ; /* fills the new variable with non-missing value */
	Tourism_type = filledType;
	if series eq '' then delete;
run;

/* reading in country info data set */
data country_info;
	set cr.country_info (rename=(country=Country_Name));
run;


/* sorting data by country_name */
proc sort data = country_info;
	by country_name;
run;


/* creating custom format for continents */
proc format;
	value continent 1 = "North America"
					2 = "South America"
					3 = "Europe"
					4 = "Africa"
					5 = "Asia"
					6 = "Oceania"
					7 = "Antarctica";
run;

/*proc contents data = final_tourism;*/
/*run;*/

/* merge step creating two data sets */
data final_tourism nocountryfound;
	merge country_info (in = c) cleaned_tourism (in = t);
	by country_name;
	if c = 1 and t = 1 then output final_tourism;
	else if c = 0 and t = 1 then output nocountryfound;
	format continent continent.;
run;

/* subetting unmerged countries to unique values */
proc sort data = nocountryfound noduprecs;
	by country_name;
run;

/* final portion: outputting means table */
proc means data = final_tourism mean min max maxdec=0;
	class continent;
	where category="Arrivals";
run;	

proc means data = final_tourism mean min max maxdec=0;
	where category="Tourism expenditure in other countries - US$";
run;	










